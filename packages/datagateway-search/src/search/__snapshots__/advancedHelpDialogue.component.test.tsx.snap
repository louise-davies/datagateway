// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Advanced help dialogue component tests renders correctly 1`] = `
<Fragment>
  See all
   
  <ForwardRef(Link)
    aria-label="advanced_search_help.search_options_arialabel"
    component="button"
    onClick={[Function]}
    sx={
      Object {
        "fontSize": "14px",
        "fontWeight": "bold",
        "verticalAlign": "baseline",
      }
    }
  >
    search options
  </ForwardRef(Link)>
  .
  <ForwardRef(Dialog)
    PaperProps={
      Object {
        "sx": Object {
          "backgroundColor": [Function],
        },
      }
    }
    aria-labelledby="advanced-search-dialog-title"
    onClose={[Function]}
    open={false}
  >
    <Styled(ForwardRef(DialogTitle))
      id="advanced-search-dialog-title"
    >
      Advanced Search Tips
      <ForwardRef(IconButton)
        aria-label="advanced_search_help.close_button_arialabel"
        onClick={[Function]}
        size="large"
        sx={
          Object {
            "color": "grey[500]",
            "position": "absolute",
            "right": 1,
            "top": 1,
          }
        }
      >
        <Memo(ForwardRef(CloseIcon)) />
      </ForwardRef(IconButton)>
    </Styled(ForwardRef(DialogTitle))>
    <Styled(ForwardRef(Typography))
      gutterBottom={true}
    >
      advanced_search_help.description
    </Styled(ForwardRef(Typography))>
    <Styled(ForwardRef(Paper))>
      <Styled(ForwardRef(DialogTitle))>
        advanced_search_help.exact_phrase.title
      </Styled(ForwardRef(DialogTitle))>
      <Styled(ForwardRef(DialogContent))>
        <Trans
          i18nKey="advanced_search_help.exact_phrase.description"
          t={[Function]}
        >
          Use quotation marks around a phrase to search for a precise sequence of words e.g.
           
          <ForwardRef(Link)
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "innerRef": [Function],
                  "onClick": [Function],
                  "replace": [Function],
                  "target": [Function],
                  "to": [Function],
                },
                "render": [Function],
              }
            }
            onClick={[Function]}
            to="advanced_search_help.exact_phrase.link1"
          >
            "neutron scattering"
          </ForwardRef(Link)>
          .
        </Trans>
      </Styled(ForwardRef(DialogContent))>
    </Styled(ForwardRef(Paper))>
    <Styled(ForwardRef(Paper))>
      <Styled(ForwardRef(DialogTitle))>
        advanced_search_help.logic_operators.title
      </Styled(ForwardRef(DialogTitle))>
      <Styled(ForwardRef(DialogContent))>
        <Trans
          i18nKey="advanced_search_help.logic_operators.description"
          t={[Function]}
        >
          Find all data containing 'neutron' and 'scattering' with '
          <ForwardRef(Link)
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "innerRef": [Function],
                  "onClick": [Function],
                  "replace": [Function],
                  "target": [Function],
                  "to": [Function],
                },
                "render": [Function],
              }
            }
            data-testid="advanced-help-link"
            onClick={[Function]}
            to="advanced_search_help.logic_operators.link1"
          >
            neutron AND scattering
          </ForwardRef(Link)>
          '. Find all data containing either neutron or scattering with '
           
          <ForwardRef(Link)
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "innerRef": [Function],
                  "onClick": [Function],
                  "replace": [Function],
                  "target": [Function],
                  "to": [Function],
                },
                "render": [Function],
              }
            }
            onClick={[Function]}
            to="advanced_search_help.logic_operators.link2"
          >
            neutron OR scattering
          </ForwardRef(Link)>
          '. Find all data that contains the phrase 'scattering' but exclude those containing 'elastic' with '
           
          <ForwardRef(Link)
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "innerRef": [Function],
                  "onClick": [Function],
                  "replace": [Function],
                  "target": [Function],
                  "to": [Function],
                },
                "render": [Function],
              }
            }
            onClick={[Function]}
            to="advanced_search_help.logic_operators.link3"
          >
            scattering NOT elastic
          </ForwardRef(Link)>
          '. Use brackets around phrases to construct more complicated searches e.g. '
           
          <ForwardRef(Link)
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "innerRef": [Function],
                  "onClick": [Function],
                  "replace": [Function],
                  "target": [Function],
                  "to": [Function],
                },
                "render": [Function],
              }
            }
            onClick={[Function]}
            to="advanced_search_help.logic_operators.link4"
          >
            scattering NOT (elastic OR neutron)
          </ForwardRef(Link)>
          '.
        </Trans>
      </Styled(ForwardRef(DialogContent))>
    </Styled(ForwardRef(Paper))>
    <Styled(ForwardRef(Paper))>
      <Styled(ForwardRef(DialogTitle))>
        advanced_search_help.wildcards.title
      </Styled(ForwardRef(DialogTitle))>
      <Styled(ForwardRef(DialogContent))>
        <Trans
          i18nKey="advanced_search_help.wildcards.description"
          t={[Function]}
        >
          Use wildcards to take the place of one or more characters in a phrase. A question mark '?' can be used to search for a phrase with one or more character missing e.g. '
           
          <ForwardRef(Link)
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "innerRef": [Function],
                  "onClick": [Function],
                  "replace": [Function],
                  "target": [Function],
                  "to": [Function],
                },
                "render": [Function],
              }
            }
            onClick={[Function]}
            to="advanced_search_help.wildcards.link1"
          >
            te?t
          </ForwardRef(Link)>
          ' will return results containing 'test' or 'text'. An asterix '*' can be used to replace zero or more characters e.g. '
          <ForwardRef(Link)
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "innerRef": [Function],
                  "onClick": [Function],
                  "replace": [Function],
                  "target": [Function],
                  "to": [Function],
                },
                "render": [Function],
              }
            }
            onClick={[Function]}
            to="advanced_search_help.wildcards.link2"
          >
            *ium
          </ForwardRef(Link)>
          ' will return results containing words like 'sodium' and 'vanadium'.
        </Trans>
      </Styled(ForwardRef(DialogContent))>
    </Styled(ForwardRef(Paper))>
    <Styled(ForwardRef(Paper))>
      <Styled(ForwardRef(DialogTitle))>
        advanced_search_help.limited_search_results.title
      </Styled(ForwardRef(DialogTitle))>
      <Styled(ForwardRef(DialogContent))>
        advanced_search_help.limited_search_results.description {maxNumResults:{tabs:{datasetTab:false,datafileTab:false,investigationTab:false},selectAllSetting:true,settingsLoaded:false,sideLayout:false,searchableEntities:[investigation,dataset,datafile],maxNumResults:300}}
      </Styled(ForwardRef(DialogContent))>
    </Styled(ForwardRef(Paper))>
    <Styled(ForwardRef(Typography))
      gutterBottom={true}
    >
      <Trans
        i18nKey="advanced_search_help.footer"
        t={[Function]}
      >
        Further information on searching can be found
         
        <ForwardRef(Link)
          href="https://lucene.apache.org/core/4_10_2/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package_description"
          rel="noopener"
          target="_blank"
        >
          here
        </ForwardRef(Link)>
        .
      </Trans>
    </Styled(ForwardRef(Typography))>
  </ForwardRef(Dialog)>
</Fragment>
`;
